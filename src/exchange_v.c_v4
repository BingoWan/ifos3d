/* $Id: exchange_v.c,v 1.1.1.1 2009/12/09 14:29:22 sjetschny Exp $ */
/*------------------------------------------------------------------------
 * exchange of particle velocities at grid boundaries between processors
 * when using the standard staggered grid
 *
 *  ----------------------------------------------------------------------*/

#include "fd.h"

double exchange_v(float *** vx, float *** vy, float *** vz,
float *** bufferlef_to_rig, float *** bufferrig_to_lef,
float *** buffertop_to_bot, float *** bufferbot_to_top,
float *** bufferfro_to_bac, float *** bufferbac_to_fro, MPI_Request * req_send, MPI_Request * req_rec){

	extern int NX, NY, NZ, POS[4], NPROCX, NPROCY, NPROCZ, BOUNDARY,  FDORDER,  INDEX[7], ABS_TYPE;  extern int MYID; extern int count_times; /*MYID,LOG,*/
	extern const int TAG1,TAG2,TAG3,TAG4,TAG5,TAG6;

	MPI_Status status;
	int i, j, k, l, n, nf1, nf2;
	double time=0.0;  /*, time1=0.0;*/

    nf1=3*FDORDER/2-1;
	nf2=nf1-1;
    //printf("--##-------------------->funcname:%s, lineNum:%d\n", __FUNCTION__, __LINE__);
	int idx_v;
	int ll = 1;
	if(ABS_TYPE==1 && FDORDER==2){ll=2;}
	int nrow = NY + 2 * (ll*FDORDER/2) + 1, ncol = NX + 2 * (ll*FDORDER/2), ndep = NZ + 2 * (ll*FDORDER/2);
	int size = nrow * ncol * ndep;
	float *Fv = transform_3(vx, vy, vz, 0-ll*FDORDER/2, NY+ll*FDORDER/2, 1-ll*FDORDER/2, NX+ll*FDORDER/2, 1-ll*FDORDER/2, NZ+ll*FDORDER/2);
	float *Ftb = transform3(buffertop_to_bot, 1, NX, 1, NZ,  1, nf1);
    int strip = ndep;
    int slice = ncol * ndep;
    int strip_tb = nf1;
    int slice_tb = NZ * nf1;

	/*if (LOG){
	if (MYID==0) time1=MPI_Wtime();}*/

	/* top-bottom -----------------------------------------------------------*/


	if (POS[2]!=0) {	// no boundary exchange at top of global grid
		int n = 1;
        for (l=1;l<=FDORDER/2-1;l++) {
		    for (i=1;i<=NX;i++) {
			    // storage of top of local volume into buffer
			    for (k=1;k<=NZ;k++) {
			    	idx_v =  l * slice + i * strip + k;
			    	Ftb[i * slice_tb + k * strip_tb + n + 0] = Fv[3 * idx_v + 0];
			    	Ftb[i * slice_tb + k * strip_tb + n + 1] = Fv[3 * idx_v + 2];
			    	Ftb[i * slice_tb + k * strip_tb + n + 2] = Fv[3 * idx_v + 1];
			    }
		    }
		    n = n + 3;
		}
		for (l = FDORDER/2; l<=(FDORDER/2);l++) {
		    for (i=1;i<=NX;i++) {
			    // storage of top of local volume into buffer
			    for (k=1;k<=NZ;k++) {
			    	idx_v =  l * slice + i * strip + k;
			    	Ftb[i * slice_tb + k * strip_tb + n + 0] = Fv[3 * idx_v + 0];
			    	Ftb[i * slice_tb + k * strip_tb + n + 1] = Fv[3 * idx_v + 2];
			    }
		    }
		    n = n + 2;
		}
	}


    if (POS[2] != NPROCY - 1) {	// no boundary exchange at top of global grid
		int n = 1;
		for (l=FDORDER/2-1;l>=1;l--) {
		    for (i=1;i<=NX;i++) {
				// storage of top of local volume into buffer
				for (k=1;k<=NZ;k++) {
					bufferbot_to_top[i][k][n+0]  =  vy[NY-l+1][i][k];
					bufferbot_to_top[i][k][n+1]  =  vx[NY-l+1][i][k];
				    bufferbot_to_top[i][k][n+2]  =  vz[NY-l+1][i][k];
				}
			}
		    n = n + 3;
		}
		for (l = FDORDER/2; l>=(FDORDER/2);l--) {
			for (i=1;i<=NX;i++) {
			    // storage of top of local volume into buffer
				for (k=1;k<=NZ;k++) {
				    bufferbot_to_top[i][k][n+0]  =  vy[NY-l+1][i][k];
				}
			}
			n = n + 1;
		}
	}


	//MPI_Sendrecv_replace(&buffertop_to_bot[1][1][1],nf1*NX*NZ,MPI_FLOAT,INDEX[3],TAG5,INDEX[4],TAG5,MPI_COMM_WORLD,&status);
	MPI_Sendrecv_replace(&Ftb[NZ * nf1 + nf1 + 1],nf1*NX*NZ,MPI_FLOAT,INDEX[3],TAG5,INDEX[4],TAG5,MPI_COMM_WORLD,&status);
	MPI_Sendrecv_replace(&bufferbot_to_top[1][1][1], NX * NZ * nf2, MPI_FLOAT, INDEX[4], TAG6, INDEX[3], TAG6, MPI_COMM_WORLD, &status);


	if (POS[2]!=NPROCY-1) {	// no boundary exchange at top of global grid
		int n = 1;
        for (l=1;l<=FDORDER/2-1;l++) {
		    for (i=1;i<=NX;i++) {
			    // storage of top of local volume into buffer
			    for (k=1;k<=NZ;k++) {
			    	idx_v =  l * slice + i * strip + k;
			    	Fv[3 * (idx_v + NY * slice) + 1] = Ftb[i * slice_tb + k * strip_tb + n + 0];
			    	Fv[3 * (idx_v + NY * slice) + 2] = Ftb[i * slice_tb + k * strip_tb + n + 1];
			    	Fv[3 * (idx_v + NY * slice) + 0] = Ftb[i * slice_tb + k * strip_tb + n + 2];
			    }
		    }
		    n = n + 3;
		}
		for (l = FDORDER/2; l<=(FDORDER/2);l++) {
		    for (i=1;i<=NX;i++) {
			    // storage of top of local volume into buffer
			    for (k=1;k<=NZ;k++) {
			    	idx_v =  l * slice + i * strip + k;
			    	Fv[3 * (idx_v + NY * slice) + 1] = Ftb[i * slice_tb + k * strip_tb + n + 0];
			    	Fv[3 * (idx_v + NY * slice) + 2] = Ftb[i * slice_tb + k * strip_tb + n + 1];
			    	//if(MYID == 0)
			    	//printf("--##-------------------->funcname:%s, lineNum:%d, l:%d, i:%d, k, n:%d:%d\n", __FUNCTION__, __LINE__, l, i, k,n);
			    }
		    }
		    n = n + 2;
		}

	}

   inverse_3(Fv, vx, vy, vz, 0-ll*FDORDER/2, NY+ll*FDORDER/2, 1-ll*FDORDER/2, NX+ll*FDORDER/2, 1-ll*FDORDER/2, NZ+ll*FDORDER/2);

	if (POS[2]!=0) {	// no boundary exchange at top of global grid
		int n = 1;
        for (l=FDORDER/2-1;l>=1;l--) {
		    for (i=1;i<=NX;i++) {
			    // storage of top of local volume into buffer
			    for (k=1;k<=NZ;k++) {
			    	vy[1 - l][i][k] = bufferbot_to_top[i][k][n+0];
			        vx[1 - l][i][k] = bufferbot_to_top[i][k][n+1];
			        vz[1 - l][i][k] = bufferbot_to_top[i][k][n+2];
			    }
		    }
		    n = n + 3;
		}
		for (l = FDORDER/2; l>=(FDORDER/2);l--) {
		    for (i=1;i<=NX;i++) {
			    // storage of top of local volume into buffer
			    for (k=1;k<=NZ;k++) {
			    	vy[1 - l][i][k] = bufferbot_to_top[i][k][n+0];
			    }
		    }
		    n = n + 1;
		}
	}
	//if(MYID == 0)


	/* left-right -----------------------------------------------------------*/

	if ((BOUNDARY) || (POS[1]!=0))	/* no boundary exchange at left edge of global grid */
	for (j=1;j<=NY;j++){
		for (k=1;k<=NZ;k++){

			/* storage of left edge of local volume into buffer */
			n=1;
			for (l=1;l<=FDORDER/2;l++){
			bufferlef_to_rig[j][k][n++]  =  vy[j][l][k];
			bufferlef_to_rig[j][k][n++]  =  vz[j][l][k];
			}

			for (l=1;l<=(FDORDER/2-1);l++)
			bufferlef_to_rig[j][k][n++]  =  vx[j][l][k];
		}
	}

	if ((BOUNDARY) || (POS[1]!=NPROCX-1))	/* no boundary exchange at right edge of global grid */
	for (j=1;j<=NY;j++){
		for (k=1;k<=NZ;k++){
			/* storage of right edge of local volume into buffer */
			n=1;
			for (l=1;l<=FDORDER/2;l++)
			bufferrig_to_lef[j][k][n++] =  vx[j][NX-l+1][k];

			for (l=1;l<=(FDORDER/2-1);l++){
			bufferrig_to_lef[j][k][n++] =  vy[j][NX-l+1][k];
			bufferrig_to_lef[j][k][n++] =  vz[j][NX-l+1][k];
			}
		}
	}


	MPI_Sendrecv_replace(&bufferlef_to_rig[1][1][1],NY*NZ*nf1,MPI_FLOAT,INDEX[1],TAG1,INDEX[2],TAG1,MPI_COMM_WORLD,&status);
	MPI_Sendrecv_replace(&bufferrig_to_lef[1][1][1],NY*NZ*nf2,MPI_FLOAT,INDEX[2],TAG2,INDEX[1],TAG2,MPI_COMM_WORLD,&status);


	if ((BOUNDARY) || (POS[1]!=NPROCX-1))	/* no boundary exchange at right edge of global grid */
	for (j=1;j<=NY;j++){
		for (k=1;k<=NZ;k++){

			n=1;
			for (l=1;l<=FDORDER/2;l++){
			vy[j][NX+l][k] = bufferlef_to_rig[j][k][n++];
			vz[j][NX+l][k] = bufferlef_to_rig[j][k][n++];
			}

			for (l=1;l<=(FDORDER/2-1);l++)
			vx[j][NX+l][k] = bufferlef_to_rig[j][k][n++];
		}
	}

	/* no exchange if periodic boundary condition is applied */
	if ((BOUNDARY) || (POS[1]!=0))	/* no boundary exchange at left edge of global grid */
	for (j=1;j<=NY;j++){
		for (k=1;k<=NZ;k++){

			n=1;
			for (l=1;l<=FDORDER/2;l++)
			vx[j][1-l][k] = bufferrig_to_lef[j][k][n++];

			for (l=1;l<=(FDORDER/2-1);l++){
			vy[j][1-l][k] = bufferrig_to_lef[j][k][n++];
			vz[j][1-l][k] = bufferrig_to_lef[j][k][n++];
			}


		}
	}

	/* front-back -----------------------------------------------------------*/


	if ((BOUNDARY) || (POS[3]!=0))	/* no boundary exchange at front side of global grid */
	for (i=1;i<=NX;i++){
		for (j=1;j<=NY;j++){

			/* storage of front side of local volume into buffer */
			n=1;
			for (l=1;l<=FDORDER/2;l++){
			bufferfro_to_bac[j][i][n++]  =  vx[j][i][l];
			bufferfro_to_bac[j][i][n++]  =  vy[j][i][l];
			}

			for (l=1;l<=(FDORDER/2-1);l++)
			bufferfro_to_bac[j][i][n++]  =  vz[j][i][l];
		}
	}


	/* no exchange if periodic boundary condition is applied */
	if ((BOUNDARY) || (POS[3]!=NPROCZ-1))	/* no boundary exchange at back side of global grid */
	for (i=1;i<=NX;i++){
		for (j=1;j<=NY;j++){

			/* storage of back side of local volume into buffer */
			n=1;
			for (l=1;l<=FDORDER/2;l++)
			bufferbac_to_fro[j][i][n++]  =  vz[j][i][NZ-l+1];

			for (l=1;l<=(FDORDER/2-1);l++){
			bufferbac_to_fro[j][i][n++]  =  vx[j][i][NZ-l+1];
			bufferbac_to_fro[j][i][n++]  =  vy[j][i][NZ-l+1];
			}

		}
	}



	MPI_Sendrecv_replace(&bufferfro_to_bac[1][1][1],NX*NY*nf1,MPI_FLOAT,INDEX[5],TAG3,INDEX[6],TAG3,MPI_COMM_WORLD,&status);
	MPI_Sendrecv_replace(&bufferbac_to_fro[1][1][1],NX*NY*nf2,MPI_FLOAT,INDEX[6],TAG4,INDEX[5],TAG4,MPI_COMM_WORLD,&status);

	/* no exchange if periodic boundary condition is applied */

	if ((BOUNDARY) || (POS[3]!=NPROCZ-1))	/* no boundary exchange at back side of global grid */
	for (i=1;i<=NX;i++){
		for (j=1;j<=NY;j++){

			n=1;
			for (l=1;l<=FDORDER/2;l++){
			vx[j][i][NZ+l] = bufferfro_to_bac[j][i][n++];
			vy[j][i][NZ+l] = bufferfro_to_bac[j][i][n++];
			}

			for (l=1;l<=(FDORDER/2-1);l++)
			vz[j][i][NZ+l] = bufferfro_to_bac[j][i][n++];
		}
	}

	/* no exchange if periodic boundary condition is applied */
	if ((BOUNDARY) || (POS[3]!=0))	/* no boundary exchange at front side of global grid */
	for (i=1;i<=NX;i++){
		for (j=1;j<=NY;j++){
			n=1;
			for (l=1;l<=FDORDER/2;l++)
			vz[j][i][1-l] = bufferbac_to_fro[j][i][n++];

			for (l=1;l<=(FDORDER/2-1);l++){
			vx[j][i][1-l] = bufferbac_to_fro[j][i][n++];
			vy[j][i][1-l] = bufferbac_to_fro[j][i][n++];
			}
		}
	}
/*
 *
    if (count_times < 3) {
        for (j = 0-ll*FDORDER/2; j <= NY; j++) {
            for (i = 1-ll*FDORDER/2; i <= NX; i++) {
                for (k = 1-ll*FDORDER/2; k <= NZ; k++) {
        	        idx_v =  l * slice + i * strip + k;
      	            vx[j][i][k] = Fv[idx_v * 3 + 0];
      	            vy[j][i][k] = Fv[idx_v * 3 + 1];
      	            vz[j][i][k] = Fv[idx_v * 3 + 2];
                }
            }
        }
    } */


	free_trans_3(Fv, 0-ll*FDORDER/2, NY+ll*FDORDER/2, 1-ll*FDORDER/2, NX+ll*FDORDER/2, 1-ll*FDORDER/2, NZ+ll*FDORDER/2);
	free_trans(Ftb, 1, NX, 1, NZ, 1, nf1);

	return time;

}
